{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\react-forms\\\\src\\\\components\\\\SimpleInput.js\",\n  _s = $RefreshSig$();\nimport { useState, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SimpleInput = props => {\n  _s();\n  const [inputName, setInputName] = useState('');\n  const handleInputChange = event => {\n    setInputName(event.target.value);\n  };\n  const handleFormSubmission = event => {\n    //The first thing is to prevent default behaviour\n    event.preventDefault();\n    if (inputName) setInputName('');\n    console.log(inputName);\n  };\n\n  //2.The other way is to use useRef\n  // const nameInputRef = useRef('');\n  // const handleFormSubmission = (event)=>{\n  //   event.preventDefault();\n  //   console.log(nameInputRef.current.value);\n  //   //We can reset the input field using ref here\n  //   //But that is not the ideal way\n  //   //As it tends to directly change the dom\n  //   //Not something that should be done with react\n  //   nameInputRef.current.value = '';\n\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleFormSubmission,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-control\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        /* ref={nameInputRef}*/value: inputName,\n        onChange: handleInputChange,\n        type: \"text\",\n        id: \"name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_s(SimpleInput, \"psw9V5K44x7e1HIc/Rn88okcc04=\");\n_c = SimpleInput;\nexport default SimpleInput;\nvar _c;\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"names":["useState","useRef","SimpleInput","props","inputName","setInputName","handleInputChange","event","target","value","handleFormSubmission","preventDefault","console","log"],"sources":["D:/React/react-forms/src/components/SimpleInput.js"],"sourcesContent":["import { useState, useRef } from \"react\";\n\nconst SimpleInput = (props) => {\n\n  const [inputName , setInputName ] = useState('');\n  const handleInputChange = (event)=>{\n    setInputName(event.target.value);\n  }\n  \n  const handleFormSubmission = (event)=>{\n    //The first thing is to prevent default behaviour\n    event.preventDefault();\n    if(inputName)\n    setInputName('');\n    console.log(inputName);\n  }\n\n  //2.The other way is to use useRef\n  // const nameInputRef = useRef('');\n  // const handleFormSubmission = (event)=>{\n  //   event.preventDefault();\n  //   console.log(nameInputRef.current.value);\n  //   //We can reset the input field using ref here\n  //   //But that is not the ideal way\n  //   //As it tends to directly change the dom\n  //   //Not something that should be done with react\n  //   nameInputRef.current.value = '';\n\n  // }\n  \n  return (\n    <form onSubmit={handleFormSubmission}>\n      <div className='form-control'>\n        <label htmlFor='name'>Your Name</label>\n        <input /* ref={nameInputRef}*/value={inputName} onChange={handleInputChange} type='text' id='name' />\n      </div>\n      <div className=\"form-actions\">\n        <button>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAAC;AAEzC,MAAMC,WAAW,GAAIC,KAAK,IAAK;EAAA;EAE7B,MAAM,CAACC,SAAS,EAAGC,YAAY,CAAE,GAAGL,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAMM,iBAAiB,GAAIC,KAAK,IAAG;IACjCF,YAAY,CAACE,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EAClC,CAAC;EAED,MAAMC,oBAAoB,GAAIH,KAAK,IAAG;IACpC;IACAA,KAAK,CAACI,cAAc,EAAE;IACtB,IAAGP,SAAS,EACZC,YAAY,CAAC,EAAE,CAAC;IAChBO,OAAO,CAACC,GAAG,CAACT,SAAS,CAAC;EACxB,CAAC;;EAED;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA,oBACE;IAAM,QAAQ,EAAEM,oBAAqB;IAAA,wBACnC;MAAK,SAAS,EAAC,cAAc;MAAA,wBAC3B;QAAO,OAAO,EAAC,MAAM;QAAA,UAAC;MAAS;QAAA;QAAA;QAAA;MAAA,QAAQ,eACvC;QAAO,uBAAuB,KAAK,EAAEN,SAAU;QAAC,QAAQ,EAAEE,iBAAkB;QAAC,IAAI,EAAC,MAAM;QAAC,EAAE,EAAC;MAAM;QAAA;QAAA;QAAA;MAAA,QAAG;IAAA;MAAA;MAAA;MAAA;IAAA,QACjG,eACN;MAAK,SAAS,EAAC,cAAc;MAAA,uBAC3B;QAAA,UAAQ;MAAM;QAAA;QAAA;QAAA;MAAA;IAAS;MAAA;MAAA;MAAA;IAAA,QACnB;EAAA;IAAA;IAAA;IAAA;EAAA,QACD;AAEX,CAAC;AAAC,GAvCIJ,WAAW;AAAA,KAAXA,WAAW;AAyCjB,eAAeA,WAAW;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}