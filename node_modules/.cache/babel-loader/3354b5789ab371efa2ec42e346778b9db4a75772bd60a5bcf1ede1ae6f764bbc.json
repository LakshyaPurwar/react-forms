{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useReducer } from 'react';\n\n//Lets make use of useReducer\n//1.First we make the stateReducer function that \n//accepts two arguments , previous state snapshot\n//and the dispatched action\n//In this function ,we check the type mentioned in the \n//action object and accordingly return the new state.\n\nconst initialInputState = {\n  value: '',\n  isTouched: false\n};\nconst inputStateReducer = (prevState, action) => {\n  if (action.type == 'VALUE') {\n    return {\n      ...prevState,\n      value: action.newValue\n    };\n  }\n  if (action.type == 'BLUR') {\n    return {\n      ...prevState,\n      isTouched: true\n    };\n  }\n  if (action.type == 'RESET') {\n    return {\n      ...prevState,\n      value: '',\n      isTouched: false\n    };\n  }\n  return initialInputState;\n};\nconst useInput = isValid => {\n  _s();\n  const [inputState, dispatch] = useReducer(inputStateReducer, initialInputState);\n  const inputValueIsValid = isValid(inputState.value);\n  const isError = !inputValueIsValid && inputState.isTouched;\n  const inputValueChangeHandler = event => {\n    // setInputValue(event.target.value);\n    dispatch({\n      type: 'VALUE',\n      newValue: event.target.value\n    });\n  };\n  const inputFieldBlurHandler = () => {\n    //Blur means it lost focus\n    // setInputFieldIsTouched(true);\n    dispatch({\n      type: 'BLUR'\n    });\n  };\n  const reset = () => {\n    // setInputValue('');\n    // setInputFieldIsTouched(false);\n    dispatch({\n      type: 'RESET'\n    });\n  };\n  return {\n    inputValue: inputState.value,\n    inputValueIsValid,\n    isError,\n    inputValueChangeHandler,\n    inputFieldBlurHandler,\n    reset\n  };\n};\n_s(useInput, \"gvJkPEQ6Ju5turm8Oo71bK8W7Zk=\");\nexport default useInput;","map":{"version":3,"names":["React","useState","useReducer","initialInputState","value","isTouched","inputStateReducer","prevState","action","type","newValue","useInput","isValid","inputState","dispatch","inputValueIsValid","isError","inputValueChangeHandler","event","target","inputFieldBlurHandler","reset","inputValue"],"sources":["D:/React/react-forms/src/hooks/useInput.jsx"],"sourcesContent":["import React, { useState, useReducer } from 'react'\r\n\r\n//Lets make use of useReducer\r\n//1.First we make the stateReducer function that \r\n//accepts two arguments , previous state snapshot\r\n//and the dispatched action\r\n//In this function ,we check the type mentioned in the \r\n//action object and accordingly return the new state.\r\n\r\nconst initialInputState = {\r\n    value: '',\r\n    isTouched: false,\r\n}\r\nconst inputStateReducer = (prevState, action) => {\r\n    if (action.type == 'VALUE') {\r\n        return { ...prevState, value: action.newValue };\r\n\r\n    }\r\n    if (action.type == 'BLUR') {\r\n        return { ...prevState, isTouched: true };\r\n    }\r\n    if (action.type == 'RESET') {\r\n        return { ...prevState, value: '', isTouched: false };\r\n\r\n    }\r\n\r\n    return initialInputState;\r\n}\r\n\r\nconst useInput = (isValid) => {\r\n\r\n    const [inputState, dispatch] = useReducer(inputStateReducer, initialInputState);\r\n\r\n\r\n\r\n    const inputValueIsValid = isValid(inputState.value);\r\n    const isError = !inputValueIsValid && inputState.isTouched;\r\n\r\n    const inputValueChangeHandler = (event) => {\r\n        // setInputValue(event.target.value);\r\n        dispatch({ type: 'VALUE', newValue: event.target.value });\r\n    }\r\n\r\n    const inputFieldBlurHandler = () => {\r\n        //Blur means it lost focus\r\n        // setInputFieldIsTouched(true);\r\n        dispatch({ type: 'BLUR' });\r\n    }\r\n\r\n    const reset = () => {\r\n        // setInputValue('');\r\n        // setInputFieldIsTouched(false);\r\n        dispatch({ type: 'RESET' })\r\n    }\r\n\r\n    return {\r\n        inputValue: inputState.value,\r\n        inputValueIsValid,\r\n        isError,\r\n        inputValueChangeHandler,\r\n        inputFieldBlurHandler,\r\n        reset,\r\n    };\r\n}\r\n\r\nexport default useInput"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;;AAEnD;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,iBAAiB,GAAG;EACtBC,KAAK,EAAE,EAAE;EACTC,SAAS,EAAE;AACf,CAAC;AACD,MAAMC,iBAAiB,GAAG,CAACC,SAAS,EAAEC,MAAM,KAAK;EAC7C,IAAIA,MAAM,CAACC,IAAI,IAAI,OAAO,EAAE;IACxB,OAAO;MAAE,GAAGF,SAAS;MAAEH,KAAK,EAAEI,MAAM,CAACE;IAAS,CAAC;EAEnD;EACA,IAAIF,MAAM,CAACC,IAAI,IAAI,MAAM,EAAE;IACvB,OAAO;MAAE,GAAGF,SAAS;MAAEF,SAAS,EAAE;IAAK,CAAC;EAC5C;EACA,IAAIG,MAAM,CAACC,IAAI,IAAI,OAAO,EAAE;IACxB,OAAO;MAAE,GAAGF,SAAS;MAAEH,KAAK,EAAE,EAAE;MAAEC,SAAS,EAAE;IAAM,CAAC;EAExD;EAEA,OAAOF,iBAAiB;AAC5B,CAAC;AAED,MAAMQ,QAAQ,GAAIC,OAAO,IAAK;EAAA;EAE1B,MAAM,CAACC,UAAU,EAAEC,QAAQ,CAAC,GAAGZ,UAAU,CAACI,iBAAiB,EAAEH,iBAAiB,CAAC;EAI/E,MAAMY,iBAAiB,GAAGH,OAAO,CAACC,UAAU,CAACT,KAAK,CAAC;EACnD,MAAMY,OAAO,GAAG,CAACD,iBAAiB,IAAIF,UAAU,CAACR,SAAS;EAE1D,MAAMY,uBAAuB,GAAIC,KAAK,IAAK;IACvC;IACAJ,QAAQ,CAAC;MAAEL,IAAI,EAAE,OAAO;MAAEC,QAAQ,EAAEQ,KAAK,CAACC,MAAM,CAACf;IAAM,CAAC,CAAC;EAC7D,CAAC;EAED,MAAMgB,qBAAqB,GAAG,MAAM;IAChC;IACA;IACAN,QAAQ,CAAC;MAAEL,IAAI,EAAE;IAAO,CAAC,CAAC;EAC9B,CAAC;EAED,MAAMY,KAAK,GAAG,MAAM;IAChB;IACA;IACAP,QAAQ,CAAC;MAAEL,IAAI,EAAE;IAAQ,CAAC,CAAC;EAC/B,CAAC;EAED,OAAO;IACHa,UAAU,EAAET,UAAU,CAACT,KAAK;IAC5BW,iBAAiB;IACjBC,OAAO;IACPC,uBAAuB;IACvBG,qBAAqB;IACrBC;EACJ,CAAC;AACL,CAAC;AAAA,GAlCKV,QAAQ;AAoCd,eAAeA,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}