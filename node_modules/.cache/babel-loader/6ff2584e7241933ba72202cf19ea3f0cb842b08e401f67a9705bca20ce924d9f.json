{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useReducer } from 'react';\n\n//Lets make use of useReducer\n//1.First we make the stateReducer function that \n//accepts two arguments , previous state snapshot\n//and the dispatched action\n//In this function ,we check the type mentioned in the \n//action object and accordingly return the new state.\n\nconst initialInputState = {\n  value: '',\n  isTouched: false\n};\nconst inputStateReducer = (prevState, action) => {\n  return initialInputState;\n};\nconst useInput = isValid => {\n  _s();\n  const [inputState, dispatch] = useReducer(inputStateReducer, initialInputState);\n  const inputValueIsValid = isValid(inputState.value);\n  const isError = !inputValueIsValid && inputState.isTouched;\n  const inputValueChangeHandler = event => {\n    setInputValue(event.target.value);\n  };\n  const inputFieldBlurHandler = () => {\n    //Blur means it lost focus\n    setInputFieldIsTouched(true);\n  };\n  const reset = () => {\n    setInputValue('');\n    setInputFieldIsTouched(false);\n  };\n  return {\n    inputValue,\n    inputValueIsValid,\n    isError,\n    inputValueChangeHandler,\n    inputFieldBlurHandler,\n    reset\n  };\n};\n_s(useInput, \"Uv76WyNUiSVPotVymqDK84saUMY=\");\nexport default useInput;","map":{"version":3,"names":["React","useState","useReducer","initialInputState","value","isTouched","inputStateReducer","prevState","action","useInput","isValid","inputState","dispatch","inputValueIsValid","isError","inputValueChangeHandler","event","setInputValue","target","inputFieldBlurHandler","setInputFieldIsTouched","reset","inputValue"],"sources":["D:/React/react-forms/src/hooks/useInput.jsx"],"sourcesContent":["import React, { useState , useReducer } from 'react'\r\n\r\n//Lets make use of useReducer\r\n    //1.First we make the stateReducer function that \r\n    //accepts two arguments , previous state snapshot\r\n    //and the dispatched action\r\n    //In this function ,we check the type mentioned in the \r\n    //action object and accordingly return the new state.\r\n\r\nconst initialInputState = {\r\n    value : '',\r\n    isTouched : false,\r\n}\r\n    const inputStateReducer = (prevState , action) =>{\r\n    return initialInputState;\r\n}\r\n\r\nconst useInput = (isValid) => {\r\n\r\n    const [inputState , dispatch] = useReducer(inputStateReducer , initialInputState);\r\n    \r\n\r\n    \r\n    const  inputValueIsValid = isValid(inputState.value);\r\n    const  isError = !inputValueIsValid && inputState.isTouched;\r\n\r\n    const inputValueChangeHandler = (event) => {\r\n        setInputValue(event.target.value);\r\n    }\r\n\r\n    const inputFieldBlurHandler = () => {\r\n        //Blur means it lost focus\r\n        setInputFieldIsTouched(true);\r\n    }\r\n\r\n    const reset = ()=>{\r\n        setInputValue('');\r\n        setInputFieldIsTouched(false);\r\n    }\r\n\r\n    return {\r\n        inputValue ,\r\n        inputValueIsValid,\r\n        isError,\r\n        inputValueChangeHandler,\r\n        inputFieldBlurHandler,\r\n        reset,\r\n    };\r\n}\r\n\r\nexport default useInput"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAGC,UAAU,QAAQ,OAAO;;AAEpD;AACI;AACA;AACA;AACA;AACA;;AAEJ,MAAMC,iBAAiB,GAAG;EACtBC,KAAK,EAAG,EAAE;EACVC,SAAS,EAAG;AAChB,CAAC;AACG,MAAMC,iBAAiB,GAAG,CAACC,SAAS,EAAGC,MAAM,KAAI;EACjD,OAAOL,iBAAiB;AAC5B,CAAC;AAED,MAAMM,QAAQ,GAAIC,OAAO,IAAK;EAAA;EAE1B,MAAM,CAACC,UAAU,EAAGC,QAAQ,CAAC,GAAGV,UAAU,CAACI,iBAAiB,EAAGH,iBAAiB,CAAC;EAIjF,MAAOU,iBAAiB,GAAGH,OAAO,CAACC,UAAU,CAACP,KAAK,CAAC;EACpD,MAAOU,OAAO,GAAG,CAACD,iBAAiB,IAAIF,UAAU,CAACN,SAAS;EAE3D,MAAMU,uBAAuB,GAAIC,KAAK,IAAK;IACvCC,aAAa,CAACD,KAAK,CAACE,MAAM,CAACd,KAAK,CAAC;EACrC,CAAC;EAED,MAAMe,qBAAqB,GAAG,MAAM;IAChC;IACAC,sBAAsB,CAAC,IAAI,CAAC;EAChC,CAAC;EAED,MAAMC,KAAK,GAAG,MAAI;IACdJ,aAAa,CAAC,EAAE,CAAC;IACjBG,sBAAsB,CAAC,KAAK,CAAC;EACjC,CAAC;EAED,OAAO;IACHE,UAAU;IACVT,iBAAiB;IACjBC,OAAO;IACPC,uBAAuB;IACvBI,qBAAqB;IACrBE;EACJ,CAAC;AACL,CAAC;AAAA,GA/BKZ,QAAQ;AAiCd,eAAeA,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}