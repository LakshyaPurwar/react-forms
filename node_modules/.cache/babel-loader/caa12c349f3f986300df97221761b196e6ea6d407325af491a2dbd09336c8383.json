{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\react-forms\\\\src\\\\components\\\\SimpleInput.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useRef, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SimpleInput = props => {\n  _s();\n  const [inputName, setInputName] = useState('');\n  const [inputEmail, setInputEmail] = useState('');\n  // const [enteredNameIsValid , setEnteredNameIsValid] = useState(false);\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n\n  //Better , we have a derived state denoting validity of inputName\n\n  const enteredNameIsValid = inputName.trim() !== '';\n  const enteredEmailIsValid = isValidEmail();\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n  const formIsValid = enteredNameIsValid && enteredEmailIsValid;\n  const handleInputNameChange = event => {\n    setInputName(event.target.value);\n  };\n  const handleInputEmailChange = event => {\n    setInputEmail(event.target.value);\n  };\n  const handleInputBlur = () => {\n    //Blur means it lost focus\n    setEnteredNameTouched(true);\n  };\n  const handleFormSubmission = event => {\n    //The first thing is to prevent default behaviour\n    event.preventDefault();\n    if (!enteredNameIsValid) {\n      return;\n    }\n    setInputName('');\n    setEnteredNameTouched(false);\n    console.log(inputName);\n  };\n\n  //2.The other way is to use useRef\n  // const nameInputRef = useRef('');\n  // const handleFormSubmission = (event)=>{\n  //   event.preventDefault();\n  //   console.log(nameInputRef.current.value);\n  //   //We can reset the input field using ref here\n  //   //But that is not the ideal way\n  //   //As it tends to directly change the dom\n  //   //Not something that should be done with react\n  //   nameInputRef.current.value = '';\n\n  // }\n  const nameInputClasses = !nameInputIsInvalid ? 'form-control' : 'form-control invalid';\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleFormSubmission,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        /* ref={nameInputRef}*/\n        value: inputName,\n        onChange: handleInputNameChange,\n        type: \"text\",\n        id: \"name\",\n        onBlur: handleInputBlur\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: 'red'\n        },\n        children: \"* Name must not be empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 33\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Email Id : \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        /* ref={nameInputRef}*/\n        value: inputEmail,\n        onChange: handleInputEmailChange,\n        type: \"text\",\n        id: \"name\",\n        onBlur: handleInputBlur\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: 'red'\n        },\n        children: \"* Name must not be empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 33\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(SimpleInput, \"+g2ph860VRf/ApT4ylxRB+HjbQ4=\");\n_c = SimpleInput;\nexport default SimpleInput;\nvar _c;\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"names":["useState","useRef","useEffect","SimpleInput","props","inputName","setInputName","inputEmail","setInputEmail","enteredNameTouched","setEnteredNameTouched","enteredEmailTouched","setEnteredEmailTouched","enteredNameIsValid","trim","enteredEmailIsValid","isValidEmail","nameInputIsInvalid","formIsValid","handleInputNameChange","event","target","value","handleInputEmailChange","handleInputBlur","handleFormSubmission","preventDefault","console","log","nameInputClasses","color"],"sources":["D:/React/react-forms/src/components/SimpleInput.jsx"],"sourcesContent":["import { useState, useRef, useEffect } from \"react\";\n\nconst SimpleInput = (props) => {\n\n  const [inputName , setInputName ] = useState('');\n  const [inputEmail, setInputEmail] = useState('');\n  // const [enteredNameIsValid , setEnteredNameIsValid] = useState(false);\n  const [enteredNameTouched , setEnteredNameTouched] = useState(false); \n  const [enteredEmailTouched , setEnteredEmailTouched] = useState(false);\n  \n  //Better , we have a derived state denoting validity of inputName\n\n  const enteredNameIsValid = inputName.trim()!=='';\n  const enteredEmailIsValid = isValidEmail();\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n  const formIsValid = enteredNameIsValid && enteredEmailIsValid;\n\n\n  const handleInputNameChange = (event)=>{\n    setInputName(event.target.value);\n  }\n  \n  const handleInputEmailChange = (event)=>{\n    setInputEmail(event.target.value);\n  }\n\n\n  const handleInputBlur = ()=>{\n    //Blur means it lost focus\n    setEnteredNameTouched(true);\n\n  }\n  \n  const handleFormSubmission = (event)=>{\n    //The first thing is to prevent default behaviour\n    event.preventDefault();\n    if(!enteredNameIsValid)\n    {\n      return;\n    }\n    setInputName('');\n    setEnteredNameTouched(false);\n    console.log(inputName);\n  }\n\n  //2.The other way is to use useRef\n  // const nameInputRef = useRef('');\n  // const handleFormSubmission = (event)=>{\n  //   event.preventDefault();\n  //   console.log(nameInputRef.current.value);\n  //   //We can reset the input field using ref here\n  //   //But that is not the ideal way\n  //   //As it tends to directly change the dom\n  //   //Not something that should be done with react\n  //   nameInputRef.current.value = '';\n\n  // }\n  const nameInputClasses = !nameInputIsInvalid ? 'form-control' : 'form-control invalid';\n  \n  return (\n    <form onSubmit={handleFormSubmission}>\n      <div className={nameInputClasses}>\n        <label htmlFor='name'>Your Name</label>\n        <input\n         /* ref={nameInputRef}*/\n         value={inputName}\n         onChange={handleInputNameChange}\n         type='text'\n         id='name'\n         onBlur={handleInputBlur}\n         />\n        { nameInputIsInvalid && <p style={{color:'red'}}>* Name must not be empty</p>}\n\n        {/* The email input field will be applied here */}\n        <label htmlFor='email'>Email Id : </label>\n        <input\n         /* ref={nameInputRef}*/\n         value={inputEmail}\n         onChange={handleInputEmailChange}\n         type='text'\n         id='name'\n         onBlur={handleInputBlur}\n         />\n        { nameInputIsInvalid && <p style={{color:'red'}}>* Name must not be empty</p>}\n      </div>\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}